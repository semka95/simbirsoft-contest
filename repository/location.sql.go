// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: location.sql

package repository

import (
	"context"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations(lattitude, longitude)
    VALUES ($1, $2)
RETURNING
    id, lattitude, longitude
`

type CreateLocationParams struct {
	Lattitude float64
	Longitude float64
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation, arg.Lattitude, arg.Longitude)
	var i Location
	err := row.Scan(&i.ID, &i.Lattitude, &i.Longitude)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM locations
WHERE id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLocation, id)
	return err
}

const getLocation = `-- name: GetLocation :one
SELECT
    id, lattitude, longitude
FROM
    locations
WHERE
    id = $1
`

func (q *Queries) GetLocation(ctx context.Context, id int64) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocation, id)
	var i Location
	err := row.Scan(&i.ID, &i.Lattitude, &i.Longitude)
	return i, err
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE
    locations
SET
    lattitude = $1,
    longitude = $2
WHERE
    id = $3
RETURNING
    id, lattitude, longitude
`

type UpdateLocationParams struct {
	Lattitude float64
	Longitude float64
	ID        int64
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, updateLocation, arg.Lattitude, arg.Longitude, arg.ID)
	var i Location
	err := row.Scan(&i.ID, &i.Lattitude, &i.Longitude)
	return i, err
}
