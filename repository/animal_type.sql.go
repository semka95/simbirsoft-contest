// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: animal_type.sql

package repository

import (
	"context"
)

const createAnimalType = `-- name: CreateAnimalType :one
INSERT INTO animal_types(animal_type)
    VALUES ($1)
RETURNING
    id, animal_type
`

func (q *Queries) CreateAnimalType(ctx context.Context, animalType string) (AnimalType, error) {
	row := q.db.QueryRowContext(ctx, createAnimalType, animalType)
	var i AnimalType
	err := row.Scan(&i.ID, &i.AnimalType)
	return i, err
}

const deleteAnimalType = `-- name: DeleteAnimalType :exec
DELETE FROM animal_types
WHERE id = $1
`

func (q *Queries) DeleteAnimalType(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAnimalType, id)
	return err
}

const getAnimalType = `-- name: GetAnimalType :one
SELECT
    id, animal_type
FROM
    animal_types
WHERE
    id = $1
`

func (q *Queries) GetAnimalType(ctx context.Context, id int64) (AnimalType, error) {
	row := q.db.QueryRowContext(ctx, getAnimalType, id)
	var i AnimalType
	err := row.Scan(&i.ID, &i.AnimalType)
	return i, err
}

const updateAnimalType = `-- name: UpdateAnimalType :one
UPDATE
    animal_types
SET
    animal_type = $1
WHERE
    id = $2
RETURNING
    id, animal_type
`

type UpdateAnimalTypeParams struct {
	AnimalType string
	ID         int64
}

func (q *Queries) UpdateAnimalType(ctx context.Context, arg UpdateAnimalTypeParams) (AnimalType, error) {
	row := q.db.QueryRowContext(ctx, updateAnimalType, arg.AnimalType, arg.ID)
	var i AnimalType
	err := row.Scan(&i.ID, &i.AnimalType)
	return i, err
}
