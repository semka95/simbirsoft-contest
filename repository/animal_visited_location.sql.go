// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: animal_visited_location.sql

package repository

import (
	"context"
	"time"
)

const createVisitedLocation = `-- name: CreateVisitedLocation :one
INSERT INTO animals_visited_locations(animal_id, location_point_id)
    VALUES ($1, $2)
RETURNING
    id, date_time_of_visit_location_point, location_point_id
`

type CreateVisitedLocationParams struct {
	AnimalID        int64
	LocationPointID int64
}

type CreateVisitedLocationRow struct {
	ID                           int64
	DateTimeOfVisitLocationPoint time.Time
	LocationPointID              int64
}

func (q *Queries) CreateVisitedLocation(ctx context.Context, arg CreateVisitedLocationParams) (CreateVisitedLocationRow, error) {
	row := q.db.QueryRowContext(ctx, createVisitedLocation, arg.AnimalID, arg.LocationPointID)
	var i CreateVisitedLocationRow
	err := row.Scan(&i.ID, &i.DateTimeOfVisitLocationPoint, &i.LocationPointID)
	return i, err
}

const deleteVisitedLocation = `-- name: DeleteVisitedLocation :exec
DELETE FROM animals_visited_locations
WHERE id = $1
    AND animal_id = $2
`

type DeleteVisitedLocationParams struct {
	ID       int64
	AnimalID int64
}

func (q *Queries) DeleteVisitedLocation(ctx context.Context, arg DeleteVisitedLocationParams) error {
	_, err := q.db.ExecContext(ctx, deleteVisitedLocation, arg.ID, arg.AnimalID)
	return err
}

const searchVisitedLocation = `-- name: SearchVisitedLocation :many
SELECT
    id,
    date_time_of_visit_location_point,
    location_point_id
FROM
    animals_visited_locations
WHERE
    id > $1
    AND animal_id = $2
    AND date_time_of_visit_location_point BETWEEN $3 AND $4
ORDER BY
    id ASC
LIMIT $5
`

type SearchVisitedLocationParams struct {
	ID                             int64
	AnimalID                       int64
	DateTimeOfVisitLocationPoint   time.Time
	DateTimeOfVisitLocationPoint_2 time.Time
	Limit                          int32
}

type SearchVisitedLocationRow struct {
	ID                           int64
	DateTimeOfVisitLocationPoint time.Time
	LocationPointID              int64
}

func (q *Queries) SearchVisitedLocation(ctx context.Context, arg SearchVisitedLocationParams) ([]SearchVisitedLocationRow, error) {
	rows, err := q.db.QueryContext(ctx, searchVisitedLocation,
		arg.ID,
		arg.AnimalID,
		arg.DateTimeOfVisitLocationPoint,
		arg.DateTimeOfVisitLocationPoint_2,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchVisitedLocationRow
	for rows.Next() {
		var i SearchVisitedLocationRow
		if err := rows.Scan(&i.ID, &i.DateTimeOfVisitLocationPoint, &i.LocationPointID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVisitedLocation = `-- name: UpdateVisitedLocation :one
UPDATE
    animals_visited_locations
SET
    location_point_id = $1,
    date_time_of_visit_location_point = NOW()
WHERE
    id = $2
    AND animal_id = $3
RETURNING
    id,
    date_time_of_visit_location_point,
    location_point_id
`

type UpdateVisitedLocationParams struct {
	LocationPointID int64
	ID              int64
	AnimalID        int64
}

type UpdateVisitedLocationRow struct {
	ID                           int64
	DateTimeOfVisitLocationPoint time.Time
	LocationPointID              int64
}

func (q *Queries) UpdateVisitedLocation(ctx context.Context, arg UpdateVisitedLocationParams) (UpdateVisitedLocationRow, error) {
	row := q.db.QueryRowContext(ctx, updateVisitedLocation, arg.LocationPointID, arg.ID, arg.AnimalID)
	var i UpdateVisitedLocationRow
	err := row.Scan(&i.ID, &i.DateTimeOfVisitLocationPoint, &i.LocationPointID)
	return i, err
}
