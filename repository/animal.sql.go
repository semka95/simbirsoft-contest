// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: animal.sql

package repository

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createAnimal = `-- name: CreateAnimal :one
INSERT INTO animals(weight, length, height, gender, chipper_id, chipping_location_id)
    VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    id, weight, length, height, gender, life_status, chipping_date_time, chipper_id, chipping_location_id, death_date_time
`

type CreateAnimalParams struct {
	Weight             float64
	Length             float64
	Height             float64
	Gender             AnimalGender
	ChipperID          int64
	ChippingLocationID int64
}

func (q *Queries) CreateAnimal(ctx context.Context, arg CreateAnimalParams) (Animal, error) {
	row := q.db.QueryRowContext(ctx, createAnimal,
		arg.Weight,
		arg.Length,
		arg.Height,
		arg.Gender,
		arg.ChipperID,
		arg.ChippingLocationID,
	)
	var i Animal
	err := row.Scan(
		&i.ID,
		&i.Weight,
		&i.Length,
		&i.Height,
		&i.Gender,
		&i.LifeStatus,
		&i.ChippingDateTime,
		&i.ChipperID,
		&i.ChippingLocationID,
		&i.DeathDateTime,
	)
	return i, err
}

const deleteAnimal = `-- name: DeleteAnimal :exec
DELETE FROM animals
WHERE id = $1
`

func (q *Queries) DeleteAnimal(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAnimal, id)
	return err
}

const getAnimal = `-- name: GetAnimal :one
SELECT
    id,
    ARRAY (
        SELECT
            animal_type_id
        FROM
            animals_animal_types
        WHERE
            animals_animal_types.animal_id = $1)::bigint[] AS animal_types,
    weight,
    length,
    height,
    gender,
    life_status,
    chipping_date_time,
    chipper_id,
    chipping_location_id,
    ARRAY (
        SELECT
            id
        FROM
            animals_visited_locations
        WHERE
            animals_visited_locations.animal_id = $1)::bigint[] AS visited_locations,
    death_date_time
FROM
    animals
WHERE
    animals.id = $1
`

type GetAnimalRow struct {
	ID                 int64
	AnimalTypes        []int64
	Weight             float64
	Length             float64
	Height             float64
	Gender             AnimalGender
	LifeStatus         AnimalLifeStatus
	ChippingDateTime   time.Time
	ChipperID          int64
	ChippingLocationID int64
	VisitedLocations   []int64
	DeathDateTime      sql.NullTime
}

func (q *Queries) GetAnimal(ctx context.Context, animalID int64) (GetAnimalRow, error) {
	row := q.db.QueryRowContext(ctx, getAnimal, animalID)
	var i GetAnimalRow
	err := row.Scan(
		&i.ID,
		pq.Array(&i.AnimalTypes),
		&i.Weight,
		&i.Length,
		&i.Height,
		&i.Gender,
		&i.LifeStatus,
		&i.ChippingDateTime,
		&i.ChipperID,
		&i.ChippingLocationID,
		pq.Array(&i.VisitedLocations),
		&i.DeathDateTime,
	)
	return i, err
}

const searchAnimal = `-- name: SearchAnimal :many
SELECT
    id,
    ARRAY (
        SELECT
            animal_type_id
        FROM
            animals_animal_types
        WHERE
            animals_animal_types.animal_id = animals.id)::bigint[] AS animal_types,
    weight,
    length,
    height,
    gender,
    life_status,
    chipping_date_time,
    chipper_id,
    chipping_location_id,
    ARRAY (
        SELECT
            id
        FROM
            animals_visited_locations
        WHERE
            animals_visited_locations.animal_id = animals.id)::bigint[] AS visited_locations,
    death_date_time
FROM
    animals
WHERE
    animals.id > $1
    AND chipping_date_time BETWEEN $3::timestamp AND $4::timestamp
    AND chipper_id = COALESCE($5::bigint, chipper_id)
    AND chipping_location_id = COALESCE($6::bigint, chipping_location_id)
    AND life_status = COALESCE($7::animal_life_status, life_status)
    AND gender = COALESCE($8::animal_gender, gender)
ORDER BY
    id ASC
LIMIT $2
`

type SearchAnimalParams struct {
	ID                 int64
	Limit              int32
	StartDateTime      sql.NullTime
	EndDateTime        sql.NullTime
	ChipperID          sql.NullInt64
	ChippingLocationID sql.NullInt64
	LifeStatus         NullAnimalLifeStatus
	Gender             NullAnimalGender
}

type SearchAnimalRow struct {
	ID                 int64
	AnimalTypes        []int64
	Weight             float64
	Length             float64
	Height             float64
	Gender             AnimalGender
	LifeStatus         AnimalLifeStatus
	ChippingDateTime   time.Time
	ChipperID          int64
	ChippingLocationID int64
	VisitedLocations   []int64
	DeathDateTime      sql.NullTime
}

func (q *Queries) SearchAnimal(ctx context.Context, arg SearchAnimalParams) ([]SearchAnimalRow, error) {
	rows, err := q.db.QueryContext(ctx, searchAnimal,
		arg.ID,
		arg.Limit,
		arg.StartDateTime,
		arg.EndDateTime,
		arg.ChipperID,
		arg.ChippingLocationID,
		arg.LifeStatus,
		arg.Gender,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchAnimalRow
	for rows.Next() {
		var i SearchAnimalRow
		if err := rows.Scan(
			&i.ID,
			pq.Array(&i.AnimalTypes),
			&i.Weight,
			&i.Length,
			&i.Height,
			&i.Gender,
			&i.LifeStatus,
			&i.ChippingDateTime,
			&i.ChipperID,
			&i.ChippingLocationID,
			pq.Array(&i.VisitedLocations),
			&i.DeathDateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimal = `-- name: UpdateAnimal :one
UPDATE
    animals
SET
    weight = $1,
    length = $2,
    height = $3,
    gender = $4,
    life_status = $5,
    chipper_id = $6,
    chipping_location_id = $7
WHERE
    animals.id = $8
RETURNING
    id, weight, length, height, gender, life_status, chipping_date_time, chipper_id, chipping_location_id, death_date_time,
    ARRAY (
        SELECT
            id
        FROM
            animals_visited_locations
        WHERE
            animals_visited_locations.animal_id = $8)::bigint[] AS visited_locations
`

type UpdateAnimalParams struct {
	Weight             float64
	Length             float64
	Height             float64
	Gender             AnimalGender
	LifeStatus         AnimalLifeStatus
	ChipperID          int64
	ChippingLocationID int64
	ID                 int64
}

type UpdateAnimalRow struct {
	ID                 int64
	Weight             float64
	Length             float64
	Height             float64
	Gender             AnimalGender
	LifeStatus         AnimalLifeStatus
	ChippingDateTime   time.Time
	ChipperID          int64
	ChippingLocationID int64
	DeathDateTime      sql.NullTime
	VisitedLocations   []int64
}

func (q *Queries) UpdateAnimal(ctx context.Context, arg UpdateAnimalParams) (UpdateAnimalRow, error) {
	row := q.db.QueryRowContext(ctx, updateAnimal,
		arg.Weight,
		arg.Length,
		arg.Height,
		arg.Gender,
		arg.LifeStatus,
		arg.ChipperID,
		arg.ChippingLocationID,
		arg.ID,
	)
	var i UpdateAnimalRow
	err := row.Scan(
		&i.ID,
		&i.Weight,
		&i.Length,
		&i.Height,
		&i.Gender,
		&i.LifeStatus,
		&i.ChippingDateTime,
		&i.ChipperID,
		&i.ChippingLocationID,
		&i.DeathDateTime,
		pq.Array(&i.VisitedLocations),
	)
	return i, err
}
