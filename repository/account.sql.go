// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: account.sql

package repository

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(first_name, last_name, email, PASSWORD)
    VALUES ($1, $2, $3, $4)
RETURNING
    id, first_name, last_name, email
`

type CreateAccountParams struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
}

type CreateAccountRow struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i CreateAccountRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT
    id,
    first_name,
    last_name,
    email
FROM
    accounts
WHERE
    id = $1
`

type GetAccountRow struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
}

func (q *Queries) GetAccount(ctx context.Context, id int64) (GetAccountRow, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i GetAccountRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const searchAccount = `-- name: SearchAccount :many
SELECT
    id,
    first_name,
    last_name,
    email
FROM
    accounts
WHERE
    id > $1
    AND first_name ILIKE '%' || $3::string || '%'
    AND last_name ILIKE '%' || $4::string || '%'
    AND email ILIKE '%' || $5::string || '%'
ORDER BY
    id ASC
LIMIT $2
`

type SearchAccountParams struct {
	ID        int64
	Limit     int32
	FirstName string
	LastName  string
	Email     string
}

type SearchAccountRow struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
}

func (q *Queries) SearchAccount(ctx context.Context, arg SearchAccountParams) ([]SearchAccountRow, error) {
	rows, err := q.db.QueryContext(ctx, searchAccount,
		arg.ID,
		arg.Limit,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchAccountRow
	for rows.Next() {
		var i SearchAccountRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE
    accounts
SET
    first_name = $1,
    last_name = $2,
    email = $3,
    PASSWORD = $4
WHERE
    id = $5
RETURNING
    id,
    first_name,
    last_name,
    email
`

type UpdateAccountParams struct {
	FirstName string
	LastName  string
	Email     string
	Password  string
	ID        int64
}

type UpdateAccountRow struct {
	ID        int64
	FirstName string
	LastName  string
	Email     string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (UpdateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	var i UpdateAccountRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}
